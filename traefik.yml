version: '3.3'

secrets:
  traefik_users:
    file: ./.secrets/.traefik_users.secret

services:
  traefik:
    image: traefik:v2.8.3
    secrets:
      - traefik_users
    env_file: .env
    ports:
      - 80:80
      - 443:443
    networks:
      - public
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - public-certificates:/certificates
    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.labels.public.public-certificates == true
          - node.role == manager
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the public network (declared below)
        - traefik.docker.network=public
        # Use the custom label "traefik.constraint-label=public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=public
        # admin-auth middleware with HTTP Basic auth
        # Using the basic_auth_users secrets file
        - traefik.http.middlewares.admin-auth.basicauth.usersFile=/run/secrets/traefik_users
        - traefik.http.middlewares.admin-auth.basicauth.headerField=X-WebAuth-User
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.public-http.rule=Host(`${DOMAIN:?DOMAIN variable not set}`)
        - traefik.http.routers.public-http.entrypoints=http
        - traefik.http.routers.public-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.public-https.rule=Host(`${DOMAIN:?DOMAIN variable not set}`)
        - traefik.http.routers.public-https.entrypoints=https
        - traefik.http.routers.public-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.public-https.service=api@internal
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.public-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        - traefik.http.routers.public-https.middlewares=admin-auth
        # Define the port inside of the Docker service to use
        - traefik.http.services.public.loadbalancer.server.port=8080
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label "traefik.constraint-label=public"
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Create an entrypoint "http" listening on address 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on address 80
      - --entrypoints.https.address=:443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      - --certificatesresolvers.le.acme.email=${EMAIL:?EMAIL variable not set}
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  public-certificates:
    external: true
networks:
  # Use the previously created public network "public", shared with other
  # services that need to be publicly available via this Traefik
  public:
    external: true